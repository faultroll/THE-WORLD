sicp
https://www.bilibili.com/video/av8515129
http://web.mit.edu/alexmv/6.037/sicp.pdf

lisp in c
https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html

cycle in scheme：https://stackoverflow.com/questions/2395428/what-are-circular-lists-good-for-in-lisp-or-scheme
https://stackoverflow.com/questions/604988/self-referential-data-structures-in-lisp-scheme
https://srfi.schemers.org/
https://github.com/DeathKing/Hit-DataStructure-On-Scheme
https://gitlab.com/baioc/paradigms
ctl：https://github.com/NanoComp/libctl


windows下无法从emacs调起mit-scheme
```
sicp in emacs（scheme）
https://emacs-china.org/t/sicp-in-elisp/11401
https://blog.csdn.net/yangmingysc/article/details/8796774
https://stackoverflow.com/questions/33106135/is-there-way-to-run-mit-scheme-interpreter-under-emacs-on-windows
mit scheme（最新版不支持win，只能用9.2版本）：
http://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/
https://groups.csail.mit.edu/mac/ftpdir/scheme-7.4/doc-html/user_7.html
https://www.cnblogs.com/clockwork/p/6292436.html
```
scheme+emacs+windows（chezscheme）
https://blog.csdn.net/skydoot/article/details/97619894
https://zhuanlan.zhihu.com/p/32772065
https://futurismo.biz/archives/2888
https://stackoverflow.com/questions/12448031/scheme-implementation-running-on-emacs-under-windows-for-working-through-sicp
https://github.com/fedeinthemix/chez-mit
chezscheme：https://www.scheme.com/csug8/
http://www.yinwang.org/blog-cn/2013/03/28/chez-scheme
variable __ is not bound：需要选中区域，然后用C-c C-r执行该区域

sicp in elisp
https://emacs.stackexchange.com/questions/14747/how-to-pass-function-as-argument-in-elisp
emacs跟课件对照
C-c C-e 运行当前 .lisp文件
DEFINE:  defvar/defun

** 环境

1. chezscheme，将路击加入环境变量
2. emacs新开一个frame（C-x 2），M-x run-scheme运行
3. 选中代码用C-c C-r运行（当文件中有多于一个语句时，C-x C-e运行会有问题）
3.1 视频中的DEFINE和IF要替换成小写
语法见：https://cisco.github.io/ChezScheme（Documentation）
https://www.ibm.com/developerworks/cn/linux/l-schm/index2.html

** 笔记

- black-box abstraction（黑盒抽象）
- conventional interfaces（约定接口）
- meta-linguistic abstraction（元语言抽象）

closure：pair的元素可以是pair（不是闭包只能构造二维，是的话可以进行三维/更高维构造）
不用data abstraction（数据抽象），在layer system（层次系统）中，容易造成complexity（复杂度）失控

- axiom of pairs
``` scheme
(define (mcons a b)
  (lambda (pick)
    (cond ((= pick 1) a)
          ((= pick 2) b)
          )))
(define (mcar x) (x 1))
(define (mcdr x) (x 2))

(mcar (mcons 37 49))
```


例程（tmp.scm）
``` scheme
(+(* 3 5)
  (* 47
     (- 20 6.8))
 12)

(define A (* 5 5))
(* A A)
(define B (+ A (* 5 A)))
B

;; 写法1（语法糖） procedure
(define (SUM-INT a b)
  (if (> a b)
      0
      (+ a
         (SUM-INT (+ 1 a) b))))
(SUM-INT 0 3)

;; 写法2 variable+lambda
(define SUM-INT
         (lambda(a b) (
                       if (> a b)
                          0
                          (+ a
                             (SUM-INT (+ 1 a) b))
                          )))
(SUM-INT 0 5)

(define (SUM TERM A NEXT B)
  (if (> A B)
      0
      (+ (TERM A)
         (SUM TERM
              (NEXT A)
              NEXT
              B))))
(define (SUM-INT A B)
  (define (IDENTITY X) X)
  (define (ADD Y) (+ 1 Y))
  (SUM IDENTITY A ADD B))
(SUM-INT 0 5)

(define x (cons 1 2)) ;; pairs
(car x) ;; car='Contents of the Address part of the Register'
(cdr x) ;; cdr('could-er')='Contents of the Decrement part of the Register'

;; 写法1
(define (mcons a b)
  (lambda (pick)
    (cond ((= pick 1) a)
          ((= pick 2) b))
    ))
(define (mcar x) (x 1))
(define (mcdr x) (x 2))

(mcar (mcons 37 49))

;; 写法2
(define mcons
  (lambda (a b)
    (lambda (pick)
      (cond ((= pick 1) a)
            ((= pick 2) b))
      )))
(define mcar
  (lambda (x)
    (x 1)
    ))
(define mcdr
  (lambda (x)
    (x 2)
    ))

(mcar (mcons 12 16))
(mcdr (mcons 12 16))

;; cons定义list（仍有问题）
(define nil 0) ;; 有问题，跟list定义出来的不一样
(define 2-to-5 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))
2-to-5
(car (cdr 2-to-5))
;; list是语法糖
(define 1-to-4 (list 1 2 3 4)) ;; (cons 1 (cons 2 (cons 3 (cons 4 nil))))
1-to-4
(car (cdr 1-to-4))

(define (MAP P L)
  (if (null? L)
      nil
      (cons (P (car L))
            (MAP P (cdr L)))
      ))
(MAP (lambda(x) (+ x 10)) 1-to-4)
;; TODO 写一个对nil生效的MAP
(MAP (lambda(x) (+ x 10)) 2-to-5) ;; 这个有问题
``` 
nil, null, ()：https://stackoverflow.com/questions/9115703/null-value-in-mit-scheme
https://stackoverflow.com/questions/948333/difference-between-null-and-empty-in-scheme
tree：
单纯cons做tree（node就是cons）：https://blog.csdn.net/weixin_42156883/article/details/104174459
``` scheme
(define nil '())
(define (TREE-VAL L)
  (car L)
  )
(define (TREE-NXT-SIB L)
  (cdr L)
  )
(define (TREE-NXT-SON L)
  (if (pair? (cdr L))
      (cadr L)
      nil
      ))
(define (TREE-ADD-SIB L N)
  (if (pair? L)
      (cons (TREE-VAL L) (TREE-ADD-SIB (TREE-NXT-SIB L) N))
      N
      ))
(define (TREE-ADD-SON L N)
  (if (pair? L)
      (cons (TREE-VAL L) (cons (TREE-ADD-SON (TREE-NXT-SON L) N) (TREE-NXT-SIB L)))
      N
      ))
(define (TREE-INS-SIB L N)
  (cons L (cons N (cdr L)))
  )
(define (TREE-INS-SON L N)
  (cons (cons (car L) N) L)
  )
(define TREE-1 (TREE-ADD-SIB nil (cons 1 nil)))
TREE-1
(define TREE-2 (TREE-ADD-SIB TREE-1 (cons 2 nil)))
TREE-2
(define TREE-3 (TREE-ADD-SON TREE-2 (cons 3 nil)))
TREE-3
(define TREE-4 (TREE-ADD-SIB TREE-3 (cons 4 nil)))
TREE-4
;; 顺序无影响
(define TREE-1 (TREE-ADD-SIB nil (cons 1 nil)))
TREE-1
(define TREE-2 (TREE-ADD-SIB TREE-1 (cons 2 nil)))
TREE-2
(define TREE-3 (TREE-ADD-SIB TREE-2 (cons 4 nil)))
TREE-3
(define TREE-4 (TREE-ADD-SON TREE-3 (cons 3 nil)))
TREE-4
(cdr TREE-4)
```
定义tree（node是单独定义的结构体）：https://blog.csdn.net/ggggqqqqihc/article/details/1720269
``` scheme
(define nil '())
;; 以下两个等价，都是tree
(list (list 1 2) 3 4 (list 5 (list 6)) 7)
(cons (cons 1 (cons 2 nil)) (cons 3 (cons 4 (cons (cons 5 (cons (cons 6 nil) nil)) (cons 7 nil)))))

;; TREE实现
(define nil '())
(define (TREE-MAKE-TREE ROOT BRANCH-LEFT BRANCH-RIGHT)
  ;; 要定义一个TREE结构，而不是单纯用cons来做
  (cons ROOT (cons BRANCH-LEFT BRANCH-RIGHT))
  ;; 也可以(cons ROOT (cons BRANCH-LEFT cons (BRANCH-RIGHT nil)))，这样定义就是(list ROOT BRANCH-LEFT BRANCH-RIGHT)，相当于pairs-->list-->tree这样，更好
  )
(define (TREE-MAKE-NODE DATA) ;; DATA可以是pairs
  (TREE-MAKE-TREE DATA nil nil)
  )
;; 这三个GET是一个barriar，防止因数据结构修改导致后续的逻辑修改
(define (TREE-GET-ROOT TREE)
  (car TREE)
  )
(define (TREE-GET-LEFT TREE)
  (cadr TREE)
  )
(define (TREE-GET-RIGHT TREE)
  (cddr TREE)
  )
(define (TREE-EMPTY? TREE)
  (null? TREE) ;; 这里不能用pairs?来判断
  )
;; 上面是george的工作，下面是逻辑相关
(define (TREE-INS-RIGHT TREE DATA)
  (TREE-MAKE-TREE
   (TREE-GET-ROOT TREE)
   (TREE-GET-LEFT TREE)
   (TREE-MAKE-TREE DATA nil (TREE-GET-RIGHT TREE))
   ))
(define (TREE-INS-LEFT TREE DATA)
  (TREE-MAKE-TREE
   (TREE-GET-ROOT TREE)
   (TREE-MAKE-TREE DATA (TREE-GET-LEFT TREE) nil)
   (TREE-GET-RIGHT TREE)
   ))

(TREE-EMPTY? (TREE-MAKE-NODE 1))
(TREE-EMPTY? (TREE-GET-LEFT (TREE-MAKE-NODE 1)))
(TREE-EMPTY? (TREE-GET-RIGHT (TREE-MAKE-NODE 1)))
(TREE-INS-RIGHT (TREE-INS-LEFT (TREE-INS-LEFT (TREE-INS-RIGHT (TREE-MAKE-NODE 1) 2) 3) 4) 5)

(define (TREE-ADD-RIGHT TREE DATA)
  (if (TREE-EMPTY? TREE)
      (TREE-MAKE-NODE DATA)
      (TREE-MAKE-TREE
       (TREE-GET-ROOT TREE)
       (TREE-GET-LEFT TREE)
       (TREE-ADD-RIGHT (TREE-GET-RIGHT TREE) DATA)
       )
      ))
(define (TREE-ADD-LEFT TREE DATA)
  (if (TREE-EMPTY? TREE)
      (TREE-MAKE-NODE DATA)
      (TREE-MAKE-TREE
       (TREE-GET-ROOT TREE)
       (TREE-ADD-LEFT (TREE-GET-LEFT TREE) DATA)
       (TREE-GET-RIGHT TREE)
       )
      ))

(TREE-ADD-RIGHT (TREE-INS-RIGHT (TREE-INS-LEFT (TREE-INS-LEFT (TREE-INS-RIGHT (TREE-MAKE-NODE 1) 2) 3) 4) 5) 6)
(TREE-ADD-LEFT (TREE-INS-RIGHT (TREE-INS-LEFT (TREE-INS-LEFT (TREE-INS-RIGHT (TREE-MAKE-NODE 1) 2) 3) 4) 5) 6)
```

``` c
// TODO 宏统一为指针或者结构体

typedef struct _pair_s_ {
  void *address;
  void *decrement;
} pair_s;

/* Contents of the Address part of the Register */
/*
void *pair_car(pair_s *pair)
{
  return (pair->address);
}
*/
#define pair_car(_pair) ((_pair).address)

/* Contents of the Decrement part of the Register */
/*
void *pair_cdr(pair_s *pair)
{
  return (pair->decrement);
}
*/
#define pair_cdr(_pair) ((_pair).decrement)
 /*
pair_s *pair_new(void *address, void *decrement)
{
  pair_s *pair = malloc(sizeof(pair_s));
  pair_car(pair) = address;
  pair_cdr(pair) = decrement;

  return pair;
}

void pair_del(pair_s *pair)
{
  if (pair != NULL)
    {
      free(pair);
    }
}

#define pair_cons(_address, _decrement) (pair_new((_address), (_decrement)))
 */
#define pair_cons(_address, _decrement) ((pair_s){(_address), (_decrement)})
/* pair直接一个.h文件即可 */


typedef struct _list_s_ {
  pair_s node;
} list_s;
/* typedef pair_s list_s; */

void *list_get_node(list_s *list)
{
  return (pair_car(list->node));
}
// #define list_get_this(_list) (pair_car(list->node))

/* 内部使用（用来修改原list） */
#define list_sub_list(_list) ((list_s *)(pair_cdr((_list)->node)))
/* 对外接口 */
list_s *list_get_sub(list_s *list)
{
  return (list_sub_list(list));
}

bool list_is_empty(list_s *list)
{
  return ((NULL == list) ? true : false);
}

list_s *list_new_list(void *data)
{
   list_s *list = (list_s *)malloc(sizeof(list_s));
   list->node = pair_cons(data, NULL);

   return list;
}

list_s *list_add_node(list_s *list, void *data)
{
  if (list_is_empty(list))
    {
      return (list_new_list(data));
    }
  else
    {
      list_s *node = list_add_node(list_sub_list(list), data);
      list_sub_list(list) = node;
      return list;
    }
}

void list_del_list(list_s *list)
{
  if (list_is_empty)
    {
      return;
    }
  else
    {
      list_del_list(list_sub_list(list));
      free(list);
    }
}

/* api */
void *list_get_node(list_s *list);
list_s *list_get_sub(list_s *list);
list_s *list_new_list(void *data);
list_s *list_add_node(list_s *list, void *data);
void list_del_list(list_s *list);

/* 这个tree的定义有问题，异想天开了 */
/*
typedef struct _tree_s_ {
  list_s *left;
  list_s *right;
} tree_s;

void *tree_get_data(tree_s *tree)
{
  return (list_get_node(tree->left));
}

tree_s *tree_get_left(tree_s *tree)
{
  return (list_get_sub(tree->left));
}

void *tree_get_right(tree_s *tree)
{
  return (list_get_sub(tree->right));
}

bool tree_is_empty(tree_s *tree)
{
  return ((NULL == tree) ? true : false);
}

tree_s *tree_new_tree(void *data)
{
  tree_s *tree = (tree_s *)malloc(sizeof(tree_s));
  tree->left = list_new_list(data);
  tree->right = list_new_list(data);

  return tree;
}

void tree_add_left(tree_s *tree, void *data)
{
  // list_add_node(tree->left, data);
  // list_add_node(tree->left, tree_new_tree(data));
}

void tree_add_right(tree_s *tree, void *data)
{
  // list_add_node(tree->right, data);
}
*/


typedef struct _tree_s_ {
  pair_s root;
  pair_s left;
  pair_s right;
} tree_s;

void *tree_get_root(tree_s *tree)
{
  return (pair_car(tree->root));
}

/* 内部使用 */
#define tree_sub_left(_tree) ((tree_s *)(pair_cdr((_tree)->left)))
/* 对外接口 */
tree_s *tree_get_left(tree_s *tree)
{
  return (tree_sub_left(tree));
}

/* 内部使用 */
#define tree_sub_right(_tree) ((tree_s *)(pair_cdr((_tree)->right)))
/* 对外接口 */
tree_s *tree_get_right(tree_s *tree)
{
  return (tree_sub_right(tree));
}

bool tree_is_empty(tree_s *tree)
{
  return ((NULL == tree) ? true : false);
}

tree_s *tree_new_tree(void *data)
{
  tree_s *tree = (tree_s *)malloc(sizeof(tree_s));
  tree->root = pair_cons(data, NULL);
  tree->left = pair_cons(NULL, NULL);
  tree->right = pair_cons(NULL, NULL);

  return tree;
}

tree_s *tree_add_left(tree_s *tree, void *data)
{
  if (tree_is_empty(tree))
    {
      return (tree_new_tree(data));
    }
  else
    {
      tree_s *sub = tree_add_left(tree_sub_left(tree), data);
      tree_sub_left(tree) = sub;
      return sub;
    }
}

tree_s *tree_add_right(tree_s *tree, void *data)
{
  if (tree_is_empty(tree))
    {
      return (tree_new_tree(data));
    }
  else
    {
      tree_s *sub = tree_add_right(tree_sub_right(tree), data);
      tree_sub_right(tree) = sub;
      return sub;
    }
}

void tree_del_tree(tree_s *tree)
{
  if (tree_is_empty)
    {
      return;
    }
  else
    {
      tree_del_tree(tree_sub_right(tree));
      tree_del_tree(tree_sub_left(tree));
      free(tree);
    }
}

/* api */
void *tree_get_root(tree_s *tree);
tree_s *tree_get_left(tree_s *tree);
tree_s *tree_get_right(tree_s *tree);
tree_s *tree_new_tree(void *data);
tree_s *tree_add_left(tree_s *tree, void *data);
tree_s *tree_add_right(tree_s *tree, void *data);
void tree_del_tree(tree_s *tree);
```

语言关心的三要素
1. primitive：基本元素
2. combination&operation：组合操作（closure）
3. abstraction：抽象

primitive picture --> geometric positions --> schemes of combination
设计程序的过程 --> 设计语言的过程
被设计的语言继承于lisp

以list形式
```
(+ 3 5)
[ | ] --> [ | ] --> [ | ]
+          3         5
car      cadr     caddr
```

derivation（求导）
``` scheme
;; rules
(define (DERIV EXP VAR)
  (cond ((CONSTANT? EXP VAR) 0)
        ((SAME-VAR? EXP VAR) 1)
        ((SUM? EXP) (MAKE-SUM
                     (DERIV (A1 EXP) VAR)
                     (DERIV (A2 EXP) VAR)))
        ((PRODUCT? EXP) (MAKE-SUM
                         (MAKE-PRODUCT (M1 EXP) (DERIV (M2 EXP) VAR))
                         (MAKE-PRODUCT (DERIV (M1 EXP) VAR) (M2 EXP))))
        ))
;; representation
(define (CONSTANT? EXP VAR)
  (and (atom? EXP)
       (not (eq? EXP VAR))
       ))
(define (SAME-VAR? EXP VAR)
  (and (atom? EXP)
       (eq? EXP VAR)
       ))
(define (SUM? EXP)
  (and (not (atom? EXP))
       (eq? (car EXP) '+)
       ))
(define (MAKE-SUM A1 A2)
  (list '+ A1 A2))
(define A1 cadr)
(define A2 caddr)
(define (PRODUCT? EXP)
  (and (not (atom? EXP))
       (eq? (car EXP) '*)
       ))
(define (MAKE-PRODUCT M1 M2)
  (list '* M1 M2))
(define M1 cadr)
(define M2 caddr)
;; sample
(define FOO
  '(+ (* a (* x x))
      (+ (* b x)
         c)
      ))
(DERIV FOO 'x)
```
通过优化 MAKE-SUM可以优化显示的结果（系数为0）


pattern
![](https://upload-images.jianshu.io/upload_images/293860-14635a257e55b7e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
类似编译原理的解释器？

barrier
- 水平（层次）
- 垂直
![](https://upload-images.jianshu.io/upload_images/293860-bcf5e315e1743e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
typed data（dispatch on type）=contents+type
``` scheme
(define (ATTACH-TYPE TYPE CONTENTS)
  (cons TYPE CONTENTS))
(define (TYPE DATUM)
  (car DATUM))
(define (CONTENTS DATUM)
  (cdr DATUM))
```
瓶颈在于manager要为每个人的package进行操作（name confilct）-->用computer代替manager--> data-directed programming（table）-->decentralized control（去中心化）
```
;; name confilct
;; 重命名解决（manager）：rect-real-part和polar-real-part
;; table解决
(put 'rect 'real-part procedure)
(put 'polar 'real-part procedure)
```

package
chains of type

```
;; 下面两个等价（let也是语法糖？）
;; (let ((var1 e1) (var2 e2)) e3)
;; ((lambda(var1 var2) e3) e1 e2)
```


- 连续：stream processing（流模式）
- 离散：modularity（模块化）

call-by-need：惰性求值
流模式相关解释
https://blog.csdn.net/ww1021281778/article/details/44103985
https://zhuanlan.zhihu.com/p/46619756
https://zhuanlan.zhihu.com/p/59528108
https://stackoverflow.com/questions/33326262/scheme-memoization-with-force-and-delay-speed-comparison

``` scheme
;; stream
(define (CONS-STREAM X Y)
  (cons X (DELAY Y))
  )
(define (HEAD S)
  (car S)
  )
(define (TAIL S)
  (FORCE (cdr S))
  )
;; 使用 delay 包裹
(define (DELAY EXPR)
  (lambda() EXPR)
  )
;; 使用 force 直接拿出来调用
(define (FORCE EXPR)
  (EXPR)
  )
;; 例子
(define (NTH-STREAM N S)
  (if (= N 0)
      (HEAD S)
      (NTH-STREAM (- N 1) (TAIL S)))
  )
(define (INTEGERS-FROM N)
  (CONS-STREAM
   N
   (INTEGERS-FROM (+ N 1)))
  )
(define INTEGERS (INTEGERS-FROM 1))
(NTH-STREAM 20 INTEGERS)
```


